#!/usr/bin/env python
import pika, sys, os, logging, json
from dotenv import load_dotenv
import requests
import openai
import miniagi
from termcolor import colored
from pathlib import Path
from twilio.rest import Client
load_dotenv()


load_dotenv()

TWILIO_ACCOUNT_SID = os.environ.get("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.environ.get("TWILIO_AUTH_TOKEN")
openai.api_key = os.getenv("OPENAI_API_KEY")

logging.basicConfig(filename="example.log", encoding="utf-8", level=logging.DEBUG)
load_dotenv()

def pentest(host):
    prompt = "Perform a penetration test of the host {}. Use tools and manual analysis to identify vulnerabilities on the system. If necessary, search for information on specific services or vulnerabilities on the web. Use only commands with a short runtime. Create proof-of-concept exploits for each vulnerability found. If you manage to compromise the target, tell the user it has been pwned. Write a detailed report containing your methodolody and the results of the test (at least 500 words).".format(host)
    return prompt

     

#def make_miniagi(hostname):
miniagi = miniagi.MiniAGI(
        os.getenv("MODEL"),
        os.getenv("SUMMARIZER_MODEL"),
        pentest('127.0.0.1'),  # Passing from message queue.
        int(os.getenv("MAX_CONTEXT_SIZE")),
        int(os.getenv("MAX_MEMORY_ITEM_SIZE")),
        True, #get_bool_env("DEBUG"),
)
    
client = Client()

    
    
def main():

    def callback(ch, method, properties, body):
        inbound_payload = json.loads(body)
        inb_msg = inbound_payload["inb_msg"]
        to_phone_number = inbound_payload["To"]
        from_phone_number = inbound_payload["From"]
        #send_text_message(to_phone_number, from_phone_number, inb_msg)
        logging.info(" [x] Received %r" % body)

    channel.basic_qos(prefetch_count=1)
    channel.basic_consume(
        queue="task_queue", on_message_callback=callback, auto_ack=True
    )
    logging.info(" [*] Waiting for messages. To exit press CTRL+C")
    channel.start_consuming()
    work_dir = os.getenv("WORK_DIR")

    if work_dir is None or not work_dir:
        work_dir = os.path.join(Path.home(), "miniagi")
        if not os.path.exists(work_dir):
            os.makedirs(work_dir)

    logging.info(f"Working directory is {work_dir}")

    try:
        os.chdir(work_dir)
    except FileNotFoundError:
        logging.info(
            "Directory doesn't exist. Set WORK_DIR to an existing directory or leave it blank."
        )
        sys.exit(0)

if __name__ == "__main__":



    while True:
        try:
            miniagi.think()
        except InvalidLLMResponseError:
            logging.info(colored("Invalid LLM response, retrying...", "red"))
            continue

        (thought, command, arg) = miniagi.read_mind()

        logging.info(colored(f"MiniAGI: {thought}\nCmd: {command}, Arg: {arg}", "cyan"))
        #client.messages.create(from_=from_, to=to, body=result)

        client.messages.create(from_='+18252519142', to="+13316255728", body=thought)

        send_text_message(
            "I will: {} by doing {} with the arguments {}.".format(
                thought, command, arg
            )
        )

        #inb_msg = inbound_payload["inb_msg"]
        #to_phone_number = inbound_payload["To"]

        if command == "done":
            sys.exit(0)

        if command == "talk_to_user":
            #pass
            logging.info(colored(f"MiniAGI: {miniagi.proposed_arg}", "blue"))
            #user_input = input("Your response: ")
            #with Spinner():
            #    miniagi.user_response(user_input)
            #continue

        if command == "memorize_thoughts":
            logging.info(
                colored("MiniAGI is thinking:\n" f"{miniagi.proposed_arg}", "cyan")
            )

        # with Spinner():
        miniagi.act()

        criticism = miniagi.criticize()

        logging.info(colored(criticism, "light_magenta"))
